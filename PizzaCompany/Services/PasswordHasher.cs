using PizzaCompany.Interface;
using System.Security.Cryptography;

namespace PizzaCompany.Services
{
    public class PasswordHasher : IPasswordHasher
    {
        // Salt - randomly generated byte array added to our HASH
        private const int SaltSize = 128 / 8; //16 bytes
        //create Hash for specific length
        private const int KeySize = 256 / 8; // same size as HashAlgo
        //increase the loop of encryption key
        private const int Iterations = 10000;
        private static readonly HashAlgorithmName _hashAlgorithm = HashAlgorithmName.SHA256; // key size was 256 / 8 bytes
        // delimeter to separate salt and hash
        private static char Delimeter = ';';
        
        public string Hash(string password)
        {
            // Creating salt
            var salt = RandomNumberGenerator.GetBytes(SaltSize);
            // Creating hash
            var hash = Rfc2898DeriveBytes.Pbkdf2(password, salt, Iterations, _hashAlgorithm, KeySize);
            // salt;hash
            return string.Join(Delimeter, Convert.ToBase64String(salt), Convert.ToBase64String(hash));
        }

        public bool Verify(string passwordHash, string inputPassword)
        {
            var elements = passwordHash.Split(Delimeter);
            var salt = Convert.FromBase64String(elements[0]);
            var hash = Convert.FromBase64String(elements[1]);

            var hashInput = Rfc2898DeriveBytes.Pbkdf2(inputPassword, salt, Iterations, _hashAlgorithm, KeySize);
            return CryptographicOperations.FixedTimeEquals(hash, hashInput);
        }
    }
}
